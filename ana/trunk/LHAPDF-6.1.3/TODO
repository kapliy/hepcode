/**
@page todolist Project to-do list


LHAPDF6 TODO list
=================

WRITE PAPER
-----------

- **'Parton density evaluation for the LHC precision era'**

   Other suggestions? Target at EPJC Tools since we already have been encouraged
   to do so.

- **Intro (AB)**

   Explain background and restriction to ipol/xpol.

- **Describe API and design (AB)**

- **Benchmarking, validation and performance advice (JF,AB)**

- **Describe metadata system (AB)**

- **Describe interpolator (and xpol) system (AB,SL,MR)**

- **Describe data format (AB)**

   Also mention here the separation of data and interpolation routines, and the
   update/distribution/versioning + lhapdf script.

   PDF data dirs can be cut down to the single central PDF for uses which don't
   care about error sets, e.g. Grid MC production. Very significant space saving!

- **Describe alpha_s system (KN)**

- **Describe uncertainty system (GW)**

- **Describe compatibility routines (JF,AB)**

   Include use of LHAPDF_MAJOR_VERSION macro.

- **Note fixed problems**

   Support for different set sizes. alpha_s etc. in multi-set mode. Lambda
   reporting to PYTHIA and compat mode. Number of members now reported
   correctly & consistently.



UNVERSIONED
-----------

- **Document the lhapdf command on the website**

- **ABM PDF approval**

   Hope for approval soon.

- **JR14 PDF integration**

   Awaiting data files from Pedro Jiminez.

- **HERA 1.0 and LHeC PDF migration and approval**

   Same procedure as for ATLAS and HERA 1.5, in contact with Voica.



VERSION 6.1.x
-------------

- **Make it possible to find all metadata keys both locally and in total (AB)**

- **Expose LHAGLUE slots system for C++ use**

   Automatic memory management can be nice for everyone. Or just leave as pointers?

- **Improved high-Q extrapolation (??)**

   Needed for FCC studies, etc.

   Graeme suggests extrapolation at low-Q established from the anomalous
   dimension of the function within the grid closest to that point. What's most
   appropriate at high-Q? Gradient extrapolation in log space may be a good
   option at low-x.

- **Improved high-x interpolation/extrapolation (??)**

   Graeme, etc.: x -> 1 interpolation should be done carefully to ensure that
   all PDFs -> 0 at x = 1.0, (usually) without going negative. There should
   always be a point at x = 1 to root the interpolator. This probably deserves
   specialisation beyond generic splines. Graeme will look at what's done in the
   CTEQ code (other than interpolating in x**0.3)


VERSION 6.2
-----------

- **Optimize the grid PDF interpolator code**

   Cache log(x), log(Q) between samplings -> log() still accounts for 15% of
   CPU: can reduce by factor of 13 in some use cases (only one call for a whole
   flavour interpolation set at the same point). Below threshold? Sherpa already
   report performance increases due to being able to interpolated one flavour at
   a time, so perhaps this use case is not valid in all generators and could be
   a more complexity than it is worth.

- **Speed up interpolation (MR)**

   Many studies already... and Martin has done the important work to de-Boostify
   the interpolation grid data objects.

   Report of 6.0.4 slowness relative to LHAPDF5 (on CT10). Weird, we tested this
   at version 6.0.0 and it was outperforming LHA5. Maybe it is slower for CT10
   and ~same for CT10nlo. Juan reports that the NNPDF functions are faster.

   Possible speed-ups: caching the last log(x) and log(Q2) values, caching grid
   index lookup, caching interpolation weights, using a
   native array implementation in place of Boost::multiarray, doing a faster
   hybrid search in the grids, GCC builtins for SSE auto-vectorisation.

   Martin has got some speed-up out of a native array implementation, and found
   no benefit of changing the index search. Andy will look into caching.

- **Remove remaining Boost dependencies / move to C++11 (AB)**

   Boost was being more trouble than it was worth, but maybe now that we're not
   using the filesystem stuff it is ok. Full removal would require several changes:
   - multiarray: replace with Martin's array/SSE code
   - foreach: iterators or require C++11
   - lexical_cast: stringstream wrappers to_str, from_str (and C++11)
   - shared_ptr: manual deletes or require C++11
   - bind: C++11 or something less cool
   Actually this would be rather good, but requires C++11 which is not an option
   just yet.

- **Provide a nicer Fortran interface?**

   Surely something nicer than the LHAPDF5 API can be made? Fortran isn't going
   away from the the theory world. Suggest prefixing all functions with "lhapdf"
   and basing it on the PDFManager, with explicit commands for switching current PDF.


AS AND WHEN
-----------


- **Handle zipped PDF .dat files (AB)**

   Prefer zipped single member data files rather than virtual filesystem access
   to the tarball. Can transparently read zipped files with LD_PRELOAD and
   zlibc: is that enough? Add instructions for that to manual/website.

- **Speed up interpolation with GPUs**

   Interpolation of PDFs seems like an potential use case for GPUs, since it's
   normal to query for all partons in the set at once: if we can load the
   relevant ipol anchors for all flavours onto the GPU then we can maybe get a
   substantial speedup. OpenMP did not particuarly help, from quick tests.

- **PDF flavor aliasing mechanism**

   e.g. allow anti-flavours to be identical without duplicating their grids in
   the data files or memory. How could we implement this?

- **Allow use of valence/sea etc. decompositions**

   GridPDF may be inherited from to allow the returned values to be built from
   separate interpolations of component PDFs such as interpolated valence, sea,
   or difference PDFs that are combined to make the physical ones. The PDG ID
   code range for "generator specific" applications may be used, but we'll need
   to bear in mind that this will mean that the flavor ID list has different
   meanings and contents for internal and external purposes: maybe the
   "internal" PDG ID list needs to become part of the grid data header, or can
   the metadata be used?

- **Using std::/boost::function to generically modify the interpolation measures in x, Q (AB)**

- **Separate the x and Q2 inter/extrapolation?**

   Allow mix & match combinations. Would this simplify the code since the
   1D interpolation methods are very simple and the 2D is built from them?

- **Make GridPDFs not read their info or data blocks until an xf value is requested?!**

   Super-laziness! But is there a real gain other than ~1 sec initialization speed?

- **Updated Octave wrapper**

   To come from Phil Ilten if he's interested.

*/
